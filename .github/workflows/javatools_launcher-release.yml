name: javatools_launcher compile

# This section ("on") defines which events should trigger this workflow to run
on:
  # Pushing to these branches triggers the workflow to run
  push:
    # javatools-crosscompile branch is only in this list for testing purposes
    branches: [ master, javatools_launcher-crosscompile ]
    # But only if there is a change in a file in this path
    paths:
      - javatools_launcher/src/main/c/

  # This is a hook for manually activating the workflow
  # It can be activated in two ways
  #   - Click the "run workflow" button in github
  #   - @see <a href="https://docs.github.com/en/rest/reference/repos#create-a-repository-dispatch-event">
  #     Send a post request to the web hook<a/>
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: launhcers
          path: javatools_launcher/build/exe/

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Bump version and push tag
        # MIT Licenced open source action for creating a new version tag
        uses: anothrNick/github-tag-action@1.26.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: launcher v

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          #          body: |   TODO figure out how to dynamically add a message (argument to workflow?)
          #            Changes in this Release
          #            - First Change
          #            - Second Change
          draft: false
          prerelease: false

      - name: Upload Release Asset
          id: upload-release-asset
          uses: actions/upload-release-asset@v1
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          with:
            upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
            asset_path: javatools_launcher/build/exe/*
  #            asset_name: my-artifact.zip
  #            asset_content_type: application/

